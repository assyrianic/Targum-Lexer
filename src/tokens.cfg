'tokens': {
	'use golang-style': false
	
	/**
	 * Max tokens per tokenization.
	 * Value of 0 will tokenize the ENTIRE source code in one go
	 * So be careful when lexing all at once as you can consume alot of memory.
	 */
	'on demand':    100
	
	/**
	 * This option allows lexing comments as tokens.
	 * Disable to ignore comments in general.
	 */
	'tokenize comments': true
	
	'comments': {
		/// Single-line comments have an empty string value.
		"//":      ""
		
		/// Multi-line comments have their ending symbols as their value.
		"/*":      "*/"
		
		/// HTML style comment.
		"<!--":    "-->"
	}
	
	'invalid':     IOTA    /// IOTA's first value is 0. Token value of 0 is considered INVALID.
	'comment':     IOTA
	
	'identifier':  IOTA
	'integer':     IOTA
	'float':       IOTA
	'string':      IOTA
	'rune':        IOTA
	
	/// optional, comment out using /**/ to prevent lexing whitespace.
	///*
	'whitespace': {
		'space':   IOTA
		'tab':     IOTA
		'newline': IOTA
	}
	//*/
	
	/// optional, comment out using /**/ to prevent lexing keywords.
	'keywords': {
		"asm":            IOTA,
		"auto":           IOTA,
		"break":          IOTA,
		"case":           IOTA,
		"char":           IOTA,
		"const":          IOTA,
		"continue":       IOTA,
		"default":        IOTA,
		"do":             IOTA,
		"double":         IOTA,
		"else":           IOTA,
		"enum":           IOTA,
		"extern":         IOTA,
		"float":          IOTA,
		"for":            IOTA,
		"goto":           IOTA,
		"if":             IOTA,
		"inline":         IOTA,
		"int":            IOTA,
		"long":           IOTA,
		"register":       IOTA,
		"restrict":       IOTA,
		"return":         IOTA,
		"short":          IOTA,
		"signed":         IOTA,
		"sizeof":         IOTA,
		"static":         IOTA,
		"struct":         IOTA,
		"switch":         IOTA,
		"typedef":        IOTA,
		"union":          IOTA,
		"unsigned":       IOTA,
		"void":           IOTA,
		"volatile":       IOTA,
		"while":          IOTA,
		"_Alignas":       IOTA,
		"_Alignof":       IOTA,
		"_Atomic":        IOTA,
		"_Bool":          IOTA,
		"_Complex":       IOTA,
		"_Generic":       IOTA,
		"_Imaginary":     IOTA,
		"_Noreturn":      IOTA,
		"_Static_assert": IOTA,
		"_Thread_local":  IOTA,
		"mut":            IOTA,
		"let":            IOTA,
		"as":             IOTA,
	}
	
	/// optional, comment out using /**/ to prevent lexing operators.
	'operators': {
		"+":   IOTA,
		"-":   IOTA,
		";":   IOTA,
		"(":   IOTA,
		")":   IOTA,
		"*":   IOTA,
		"/":   IOTA,
		"<<":  IOTA,
		"<<<": IOTA,
		">>":  IOTA,
		">>>": IOTA,
		"==":  IOTA,
		">=":  IOTA,
		"<=":  IOTA,
		"&":   IOTA,
		"&&":  IOTA,
		"|":   IOTA,
		"||":  IOTA,
		"%":   IOTA,
		".":   IOTA,
		":":   IOTA,
		"?":   IOTA,
		"^":   IOTA,
		">":   IOTA,
		"<":   IOTA,
		"~":   IOTA,
		"!":   IOTA,
		"[":   IOTA,
		"]":   IOTA,
		"=":   IOTA,
		",":   IOTA,
		"{":   IOTA,
		"}":   IOTA,
		"->":  IOTA,
		"++":  IOTA,
		"--":  IOTA,
		"<<=": IOTA,
		">>=": IOTA,
		"+=":  IOTA,
		"-=":  IOTA,
		"*=":  IOTA,
		"/=":  IOTA,
		"&=":  IOTA,
		"|=":  IOTA,
		"^=":  IOTA,
		"!=":  IOTA,
		"...": IOTA,
		"::":  IOTA
		"<=>":  IOTA
	}
}
